template<long long MOD>struct Modint
{
    private:
    unsigned int value;
    
    public:
    constexpr Modint(const long long x = 0) noexcept
    {
	long long y = x;
	if(y < 0 || y >= MOD)
	{
		y %= MOD;
		if(y < 0) y += MOD;
	}
        value = (unsigned int)y;
    }

    constexpr unsigned int &val() noexcept {return value;}

    constexpr Modint operator+(const Modint &other) noexcept
    {
        Modint tmp = *this;
        return tmp += other;
    }

    constexpr Modint operator-(const Modint &other) noexcept
    {
        Modint tmp = *this;
        return tmp -= other;
    }

    constexpr Modint operator*(const Modint &other) noexcept
    {
        Modint tmp = *this;
        return tmp *= other;
    }

    constexpr Modint operator/(const Modint &other) noexcept
    {
        Modint tmp = *this;
        return tmp /= other;
    }

    constexpr Modint &operator+=(const Modint &other) noexcept
    {
        value += other.value;
        if(value >= MOD) value -= MOD;

        return *this;
    }
    
    constexpr Modint &operator-=(const Modint &other) noexcept
    {
        unsigned long long  x = value;
        if(x < other.value) x += MOD;
        x -= other.value;

        value = (unsigned int) x;

        return *this;
    }

    constexpr Modint &operator*=(const Modint &other) noexcept
    {
        unsigned long long x = value;
        x *= other.value;
        value = (unsigned int)(x%MOD);

        return *this;
    }

    constexpr Modint &operator/=(const Modint &other) noexcept
    {
        return *this = *this * other.inverse();
    }

    constexpr Modint power(long long ex) const noexcept
    {
        assert(ex >= 0);
        Modint p = *this,res = 1;

        while(ex)
        {
            if(ex & 1) res *= p;
            p *= p;
            ex >>= 1;
        }

        return res;
    }

    constexpr Modint inverse() const noexcept
    {
        assert(value);
        long long a = value,b = MOD,x = 1,y = 0;

        while(b)
        {
            long long q = a/b;

            a -= q*b; swap(a,b);
            x -= q*y; swap(x,y);
        }

        return Modint(x);
    }

    constexpr Modint &operator++(int) noexcept {return *this += 1;}

    constexpr Modint &operator--(int) noexcept {return *this -= 1;}

    constexpr bool operator==(const Modint &other){return value == other.value;}

    constexpr bool operator!=(const Modint &other){return value != other.value;}
    
    template<long long mod> friend ostream &operator<<(ostream &os,const Modint<mod> &x);
};

template<long long mod> ostream &operator<<(ostream &os,const Modint<mod> &x){os << x.value; return os;}

// using mint = Modint<998244353>;
// using mint = Modint<1000000007>;
